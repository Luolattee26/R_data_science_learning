# 生物信息学分析必备的一些R包，复制以下代码，直接运行即可；
rm(list = ls())
# 设置镜像：
options()$repos
options()$repos
options()$BioC_mirror
#options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
options(BioC_mirror="http://mirrors.tuna.tsinghua.edu.cn/bioconductor/")
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options()$repos
options()$BioC_mirror
options()$repos
install.packages('WGCNA')
install.packages(c("FactoMineR", "factoextra"))
install.packages(c("ggplot2", "pheatmap","ggpubr"))
library("FactoMineR")
library("factoextra")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("KEGG.db",ask = F,update = F)
BiocManager::install(c("GSEABase","GSVA","clusterProfiler" ),ask = F,update = F)
BiocManager::install(c("GEOquery","limma","impute" ),ask = F,update = F)
BiocManager::install(c("org.Hs.eg.db","hgu133plus2.db" ),ask = F,update = F)
# 所有的R包都提交上传到CRAN，如Github，需要通过一定的渠道进行安装
# R安装devtools包
install.packages("devtools")
library(devtools)
# 安装github上的R包（需翻墙或改hosts）
devtools::install_github('lchiffon/REmap')
# 前为github的用户名，后为包名
library(REmap)
library(GSEABase)
library(GSVA)
library(clusterProfiler)
library(ggplot2)
library(ggpubr)
library(hgu133plus2.db)
library(limma)
library(org.Hs.eg.db)
library(pheatmap)
library(REmap)
library(GSEABase)
library(GSVA)
library(clusterProfiler)
library(ggplot2)
library(ggpubr)
library(hgu133plus2.db)
library(limma)
library(org.Hs.eg.db)
library(pheatmap)
library(REmap)
library(GSEABase)
library(GSVA)
library(clusterProfiler)
library(ggplot2)
library(ggpubr)
library(hgu133plus2.db)
library(limma)
library(org.Hs.eg.db)
library(pheatmap)
rstudioapi::getActiveDocumentContext()
setwd('c:/Users/Cal luo/Desktop/R_data_science_learning/')
rstudioapi::getActiveDocumentContext()
setwd('c:/Users/Cal luo/Desktop/R_data_science_learning/')
getwd()
rm(list = ls())
setwd('c:/Users/Cal luo/Desktop/R_data_science_learning/')
getwd()
# 安装tidyverse
BiocManager::install('tidyverse')
print(require(tidyverse))
# 安装tidyverse
if (require(tidyverse) == F){
BiocManager::install('tidyverse')
}else{
print('tidyverse已安装')
library(tidyverse)
}
gc()
rm(list = ls())
# 设置镜像：
options()$repos
options()$BioC_mirror
#options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
options(BioC_mirror="http://mirrors.tuna.tsinghua.edu.cn/bioconductor/")
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options()$repos
options()$BioC_mirror
# 生物信息学分析必备的一些R包，复制以下代码，直接运行即可；
rm(list = ls())
# 设置镜像：
options()$repos
options()$BioC_mirror
#options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
options(BioC_mirror="http://mirrors.tuna.tsinghua.edu.cn/bioconductor/")
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options()$repos
options()$BioC_mirror
# 方法一：
options()$repos
install.packages('WGCNA')
install.packages(c("FactoMineR", "factoextra"))
install.packages(c("ggplot2", "pheatmap","ggpubr"))
library("FactoMineR")
library("factoextra")
# 方法二：
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("KEGG.db",ask = F,update = F)
BiocManager::install(c("GSEABase","GSVA","clusterProfiler" ),ask = F,update = F)
BiocManager::install(c("GEOquery","limma","impute" ),ask = F,update = F)
BiocManager::install(c("org.Hs.eg.db","hgu133plus2.db" ),ask = F,update = F)
# 方法三：从github中安装
# 所有的R包都提交上传到CRAN，如Github，需要通过一定的渠道进行安装
# R安装devtools包
install.packages("devtools")
library(devtools)
# 安装github上的R包（需翻墙或改hosts）
devtools::install_github('lchiffon/REmap')
# 前为github的用户名，后为包名
# 测试--加载R包；
library(REmap)
library(GSEABase)
library(GSVA)
library(clusterProfiler)
library(ggplot2)
library(ggpubr)
library(hgu133plus2.db)
library(limma)
library(org.Hs.eg.db)
library(pheatmap)
library(REmap)
library(GSEABase)
library(GSVA)
library(clusterProfiler)
library(ggplot2)
library(ggpubr)
library(hgu133plus2.db)
library(limma)
library(org.Hs.eg.db)
library(pheatmap)
rm(list = ls())
setwd('c:/Users/Cal luo/Desktop/R_data_science_learning/')
getwd()
# 安装tidyverse
if (require(tidyverse) == F){
BiocManager::install('tidyverse')
}else{
print('tidyverse已安装')
library(tidyverse)
}
# 安装tidyverse
if (require(tidyverse) == F){
BiocManager::install('tidyverse')
}else{
print('tidyverse已安装')
library(tidyverse)
}
# 安装tidyverse
if (require(tidyverse) == F){
BiocManager::install('tidyverse')
}else{
print('tidyverse已安装')
library(tidyverse)
}
# 安装tidyverse
if (require(tidyverse) == F){
BiocManager::install('tidyverse')
}else{
print('tidyverse已安装')
library(tidyverse)
}
ggplot2::mpg
# 引入mpg数据库，并且查看数据类型
mpg_data <- ggplot2::mpg
View(mpg_data)
print(type(mpg_data))
print(typeof(mpg_data))
typeof(ggplot2::mpg)
mpg_data[1]
print(print(typeof(mpg_data[1])))
print(print(typeof(mpg_data[1])))
View(mpg_data)
# 利用该数据库进行ggplot绘图
ggplot(data = mpg_data)
# 利用该数据库进行ggplot绘图
ggplot2:ggplot(data = mpg_data)
# 利用该数据库进行ggplot绘图
ggplot2::ggplot(data = mpg_data)
# 利用该数据库进行ggplot绘图
library(ggplot2)
ggplot(data = mpg_data) # 此处只会得到一张空图
ggplot(data = mpg_data) # 此处只会得到一张空图，作用是引用该数据库
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy))
?geom_point
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class))
# 安装tidyverse
if (require(tidyverse) == F){
BiocManager::install('tidyverse')
}else{
print('tidyverse已安装')
library(tidyverse)
}
# 利用该数据库进行ggplot绘图
library(ggplot2)
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class))
# 对于mapping参数来说，作用就是把变量和图形映射起来，比如x，y，color，shape，alpha
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy),
color = 'green')
?geom_point
# 此时可以得到一张散点图
# geom_point函数用于绘制散点图，aes函数用于设置数据的映射关系
# mapping参数和aes函数总是对应出现的
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class, stroke = class))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class, stroke = hwy))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class), stroke = 1)
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class), stroke = 5)
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class), stroke = 3)
# 此时可以得到一张散点图
# geom_point函数用于绘制散点图，aes函数用于设置数据的映射关系
# mapping参数和aes函数总是对应出现的
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class))
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = displ < 5))
# 此时可以得到一张散点图
# geom_point函数用于绘制散点图，aes函数用于设置数据的映射关系
# mapping参数和aes函数总是对应出现的
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy,
color = class))
# 同时也可以利用aes函数的映射关系来对需要展示的数据进行一定的筛选
# 另一种在二维图形中添加额外变量的方法，是对图形进行分面，分成若干个子集
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy))
?facet_wrap
# 同时也可以利用aes函数的映射关系来对需要展示的数据进行一定的筛选
# 另一种在二维图形中添加额外变量的方法，是对图形进行分面，分成若干个子集
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(facets = ~class, nrow = 2)
View(mpg_data)
# 同时也可以利用aes函数的映射关系来对需要展示的数据进行一定的筛选
# 另一种在二维图形中添加额外变量的方法，是对图形进行分面，分成若干个子集
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(facets = ~class + cyl, nrow = 2) # 注意引入参数时的格式
# 同时也可以利用aes函数的映射关系来对需要展示的数据进行一定的筛选
# 另一种在二维图形中添加额外变量的方法，是对图形进行分面，分成若干个子集
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(facets = ~class, nrow = 2) # 注意引入参数时的格式
# 同时也可以利用aes函数的映射关系来对需要展示的数据进行一定的筛选
# 另一种在二维图形中添加额外变量的方法，是对图形进行分面，分成若干个子集
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(facets = ~class + cyl, nrow = 2) # 注意引入参数时的格式
# facet_wrap函数第一个参数就是分面的依据（可多个），同时也可以指定分面的矩阵形态
# 如果想要达到两个变量形成交叉的分面效果，则可以使用facet_grid函数
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ cyl)
# facet_wrap函数第一个参数就是分面的依据（可多个），同时也可以指定分面的矩阵形态
# 如果想要达到两个变量形成交叉的分面效果，则可以使用facet_grid函数
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ .)
# facet_wrap函数第一个参数就是分面的依据（可多个），同时也可以指定分面的矩阵形态
# 如果想要达到两个变量形成交叉的分面效果，则可以使用facet_grid函数
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ cyl)
# facet_wrap函数第一个参数就是分面的依据（可多个），同时也可以指定分面的矩阵形态
# 如果想要达到两个变量形成交叉的分面效果，则可以使用facet_grid函数
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(cyl ~ class)
# 使用不同的图形（图层进行绘制）
ggplot(data = mpg_data) + geom_smooth(mapping = aes(x = displ, y = hwy))
?geom_smooth
linetype = drv)
# smooth函数可以选择不同的method以及formula进行绘制
ggplot(data = mpg_data) + geom_smooth(mapping = aes(x = displ, y = hwy,
linetype = drv))
# smooth函数可以选择不同的method以及formula进行绘制
ggplot(data = mpg_data) + geom_smooth(mapping = aes(x = displ, y = hwy,
linetype = drv), color = 'red')
# smooth函数可以选择不同的method以及formula进行绘制
ggplot(data = mpg_data) + geom_smooth(mapping = aes(x = displ, y = hwy,
linetype = drv, color = drv))
# smooth函数可以选择不同的method以及formula进行绘制
ggplot(data = mpg_data) + geom_smooth(mapping = aes(x = displ, y = hwy,
linetype = drv, color = drv)) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv))
# 也有类似的添加变量的操作，或者是group参数
ggplot(data = mpg_data, mapping = aes(x = displ, y = hwy, group = drv))
# 也有类似的添加变量的操作，或者是group参数
ggplot(data = mpg_data, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point() + geom_smooth()
# 也有类似的添加变量的操作，或者是group参数
ggplot(data = mpg_data, mapping = aes(x = displ, y = hwy, group = drv, color = drv)) +
geom_point() + geom_smooth()
# 将相关信息写入最开始的数据库引用中，就可以很方便的直接将映射关系传递给后面的函数
# 对于不同的图层，当然也可以进行微调
ggplot(data = mpg_data, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
# 将相关信息写入最开始的数据库引用中，就可以很方便的直接将映射关系传递给后面的函数
# 对于不同的图层，当然也可以进行微调
ggplot(data = mpg_data, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg_data, class == 'subcompact'))
?geom_smooth
# 一些图形会对原有的数据进行自动的统计变换，产生新的数据
# 比如条形图，自动的产生了原来没有的counts这个数据
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
diamonds
# 一些图形会对原有的数据进行自动的统计变换，产生新的数据
# 比如条形图，自动的产生了原来没有的count这个数据
ggplot(data = diamonds) + geom_bar(mapping = aes(x = price))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
# 其实上面的geom_smooth也是一样的，它会按照给定的模式进行拟合，输出曲线
# 查看stat参数的默认值，就可以看到该函数使用了哪种统计变换，比如bar的是stat_count()
ggplot(data = diamonds) + stat_count(mapping = aes(x = cut))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prob.., group = 1))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = prob, group = 1))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, stat(prob), group = 1))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, after_stat(prob), group = 1))
?geom_bar
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop..))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., fill = color))
?geom_bar
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., fill = color, group = 1))
# 其实上面的geom_smooth也是一样的，它会按照给定的模式进行拟合，输出曲线
# 查看stat参数的默认值，就可以看到该函数使用了哪种统计变换，比如bar的是stat_count()
ggplot(data = diamonds) + stat_count(mapping = aes(x = cut, fill = color))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, stat(prop), fill = color, group = 1))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, stat(prop), group = 1))
# 通常来说，图形和几何变换函数是一一对应的关系，当然也可以自己进行指定统计变换
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut))
# 使用color和fill这两个参数能够给条形图上色
# 如果fill参数被映射到另一个分组变量上面，那么条形图会发生堆叠，每一个色块表示两个变量之间的组合
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
# 如果不想使用这种堆叠的效果，可以通过调整position参数来改变
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity),
position = 'identity')
# 如果不想使用这种堆叠的效果，可以通过调整position参数来改变
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = NA),
position = 'identity') # 将每一个对象直接显示，但是容易重叠
# 如果不想使用这种堆叠的效果，可以通过调整position参数来改变
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), alpha = 0.2
position = 'identity') # 将每一个对象直接显示，但是容易重叠
# 如果不想使用这种堆叠的效果，可以通过调整position参数来改变
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), alpha = 0.2,
position = 'identity') # 将每一个对象直接显示，但是容易重叠
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity),
position = 'fill')
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity),
position = 'dodge')
# 在前面绘制散点图的时候，由于xy轴进行了四舍五入，所以有些点重合了，此时可以为点增加一个随机抖动来去重
ggplot(data = mpg_data) + geom_point(mapping = aes(x = displ, y = hwy), position = 'jitter')
# 在绘制箱线图的时候，常常会出现标签过长的情况，此时可以使用coord_flip()函数来解决
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip()
?theme
# coord_polar()函数则可以带来极坐标
bar_plot <- ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut))
bar_plot
coord_flip(bar_plot)
bar_plot + coord_flip()
bar_plot + coord_polar()
